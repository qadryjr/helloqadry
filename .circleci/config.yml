version: 2.1

commands:
   # Exercise - Rollback
   destroy_environment:
     steps:
       - run:
           name: Destroy environment
        
           when: on_fail
           command: |
             aws cloudformation delete-stack --stack-name QadryStack-${CIRCLE_WORKFLOW_ID:0:5}
# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  welcome: circleci/welcome-orb@0.4.1
# Orchestrate or schedule a set of jobs
jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo hello
  print_qadry:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo qadry
      
  create_infrastructure: 
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
                --template-file template.yml \
                --stack-name QadryStack-${CIRCLE_WORKFLOW_ID:0:5} \
                --region us-east-1
  # Exercise: Config and Deployment
  configure_infrastructure: 
   docker:
    - image: ubuntu
   steps:
    - checkout
    - add_ssh_keys:
            # You can get this ID in the section where you registered the SSH Key
            fingerprints: ["69:8e:25:11:49:9f:c7:96:ff:d4:30:9a:a0:51:20:a2"] 
    - run:
        name: Install Ansible
        command: |
          sudo apt install -y ansible
          
    - run:
        name: Install Aws-Cli
        command: |
          sudo apt install awscli -y   
              
    - run:
       name: Move the IP to inventory
       command: |
          aws ec2 describe-instances \
           --query 'Reservations[*].Instances[*].PublicIpAddress' \
           --output text >> inventory           
    
    - run:
        name: Run Playbook and Configure server   
        command: |
          ansible-playbook -i inventory main.yml
          
 # smoke_test:
  # docker:
   # - image: alpine:latest
   #steps:
    #- run: apk add --update aws-cli curl
    #- run:
     #   name: smoke test
      #  command: |
       #   URL="https://Qadry.uuudacity.com/"
          #Test if website exists
        #  if curl -s --head ${URL} 
         # then
          #  return 0
          #else
           # return 1
          #fi  
    #- destroy_environment
  
     
workflows:
  # Name the workflow "welcome"
  welcome:
    # Run the welcome/run job in its own container
    jobs:
      - welcome/run
      - print_hello
      - print_qadry:
          requires:
            - print_hello
      - create_infrastructure:
          requires:
           - print_qadry
      - configure_infrastructure:
          requires:
           - create_infrastructure
      
     # - smoke_test:
        #  requires:
           # - create_infrastructure
    
            
